import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/group.dart';
import '../entities/groups_stream.dart';

abstract class GroupRepository {
  ///Gets stream of all groups from the DB.
  ///
  ///Returns [GroupsStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, GroupsStream>> getGroupsStream(String companyId);

  ///Adds new group to the DB.
  ///
  ///Returns [String] containing generated by DB group id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addGroup(Group params);

  ///Updates group in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateGroup(Group params);

  ///Deletes group from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteGroup(String groupId);
}
