import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/asset_action/asset_actions_stream.dart';

abstract class AssetActionRepository {
  ///Gets stream of actions for choosen asset.
  ///
  ///Returns [AssetActionsStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, AssetActionsStream>> getAssetActionsStream(
    AssetParams params,
  );

  ///Gets stream of the last five actions for choosen asset.
  ///
  ///Returns [AssetActionsStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, AssetActionsStream>> getLastFiveAssetActionsStream(
    AssetParams params,
  );

  ///Adds new action to the DB.
  ///
  ///Returns [String] containing generated by DB item id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addAssetAction(AssetActionParams params);

  ///Updates action in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateAssetAction(
    AssetActionParams params,
  );

  ///Deletes action from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteAssetAction(
    AssetActionParams params,
  );
}
