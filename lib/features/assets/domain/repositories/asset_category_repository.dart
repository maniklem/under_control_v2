import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/asset_category/assets_categories_stream.dart';

abstract class AssetCategoryRepository {
  ///Gets stream of all assets categories.
  ///
  ///Returns [AssetsCategoriesStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, AssetsCategoriesStream>> getAssetsCategoriesStream(
    String params,
  );

  ///Adds new asset category to the DB.
  ///
  ///Returns [String] containing generated by DB instruction category id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addAssetCategory(
    AssetCategoryParams params,
  );

  ///Updates asset category in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateAssetCategory(
    AssetCategoryParams params,
  );

  ///Deletes asset category from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteAssetCategory(
    AssetCategoryParams params,
  );
}
