import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/locations.dart';

abstract class LocationRepository {
  ///Adds new location to the DB.
  ///
  ///Returns [String] containing generated by BD location id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addLocation(LocationParams params);

  ///Updates location in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateLocation(LocationParams params);

  ///Deletes location from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteLocation(LocationParams params);

  ///Caches location in local memory.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> cacheSelectedLocations(
    SelectedLocationsParams params,
  );

  ///Gets cached location from local memory.
  ///
  ///Returns [String] containing location id if location was found.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, SelectedLocationsParams>> tryToGetCachedLocation();

  ///fatches all locations from the DB.
  ///
  ///Returns [Locations] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, Locations>> fetchAllLocations(String companyId);
}
