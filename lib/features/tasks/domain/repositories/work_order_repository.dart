import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/work_order/work_orders_stream.dart';

abstract class WorkOrdersRepository {
  ///Gets stream of work orders in selected locations.
  ///
  ///Returns [WorkOrdersStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, WorkOrdersStream>> getWorkOrdersStream(
    ItemsInLocationsParams params,
  );

  ///Adds new work order to the DB.
  ///
  ///Returns [String] containing generated by DB item id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addWorkOrder(WorkOrderParams params);

  ///Updates work order in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateWorkOrder(WorkOrderParams params);

  ///Deletes work order from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteWorkOrder(WorkOrderParams params);

  ///Cancel work order and move it to work orders archive.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> cancelWorkOrder(WorkOrderParams params);
}
