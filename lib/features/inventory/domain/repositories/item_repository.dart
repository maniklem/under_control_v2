import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/items_stream.dart';

abstract class ItemRepository {
  ///Gets stream of items in selected locations.
  ///
  ///Returns [ItemsStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, ItemsStream>> getItemsStream(
    ItemsInLocationsParams params,
  );

  ///Adds new item to the DB.
  ///
  ///Returns [String] containing generated by DB item id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addItem(ItemParams params);

  ///Updates item in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateItem(ItemParams params);

  ///Deletes item from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteItem(ItemParams params);
}
