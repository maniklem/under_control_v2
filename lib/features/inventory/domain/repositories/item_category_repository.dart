import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/item_category/items_categories_stream.dart';

abstract class ItemCategoryRepository {
  ///Gets stream of all items categories.
  ///
  ///Returns [ItemsCategoriesStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, ItemsCategoriesStream>> getItemsCategoriesStream(
    String params,
  );

  ///Adds new item category to the DB.
  ///
  ///Returns [String] containing generated by DB item category id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addItemCategory(
    CategoryParams params,
  );

  ///Updates item category in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateItemCategory(
    CategoryParams params,
  );

  ///Deletes item category from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteItemCategory(
    CategoryParams params,
  );
}
