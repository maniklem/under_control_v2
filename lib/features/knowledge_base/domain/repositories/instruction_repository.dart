import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/instructions_stream.dart';

abstract class InstructionRepository {
  ///Gets stream of all instructions.
  ///
  ///Returns [InstructionsStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, InstructionsStream>> getInstructionsStream(
    String params,
  );

  ///Adds new instruction to the DB.
  ///
  ///Returns [String] containing generated by DB instruction category id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addInstructionCategory(
    InstructionParams params,
  );

  ///Updates instruction in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateInstruction(
    InstructionParams params,
  );

  ///Deletes instruction from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteInstruction(
    InstructionParams params,
  );
}
