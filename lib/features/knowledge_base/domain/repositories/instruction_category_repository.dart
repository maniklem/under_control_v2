import 'package:dartz/dartz.dart';

import '../../../core/error/failures.dart';
import '../../../core/usecases/usecase.dart';
import '../entities/instruction_category/instructions_categories_stream.dart';

abstract class InstructionCategoryRepository {
  ///Gets stream of all instructions categories.
  ///
  ///Returns [InstructionsCategoriesStream] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, InstructionsCategoriesStream>>
      getInstructionsCategoriesStream(
    String params,
  );

  ///Adds new instruction category to the DB.
  ///
  ///Returns [String] containing generated by DB instruction category id.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, String>> addInstructionCategory(
    CategoryParams params,
  );

  ///Updates instruction category in the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> updateInstructionCategory(
    CategoryParams params,
  );

  ///Deletes instruction category from the DB.
  ///
  ///Returns [VoidResult] if operation is successful.
  ///Returns [Failure] if operation is unsuccessful.
  Future<Either<Failure, VoidResult>> deleteInstructionCategory(
    CategoryParams params,
  );
}
